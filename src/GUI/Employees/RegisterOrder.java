/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI.Employees;

import Connections.*;
import java.awt.Component;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import GUI.LoginProvince;
import static GUI.LoginProvince.idEmployee;
import static GUI.LoginProvince.logInProvince;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author ronal
 */
public class RegisterOrder extends javax.swing.JFrame {
    
    static ResultSet res;
    private static int medicineUnities;
    

    /**
     * Creates new form RegisterOrder
     */
    public RegisterOrder() throws ClassNotFoundException, IOException  {
        initComponents();
        loadMedicinesTable();
        loadTypes();
        
    }
    public void loadTypes() throws ClassNotFoundException {
        res = Connections.ConnectionSQL.createConsult("select * from tipoPedido");
        try {
            while (res.next()) {
                registerOrderType.addItem(res.getString(1));
            }
        } catch (SQLException e) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        registerOrderIDClient = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        registerOrderType = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        registerOrderMedicines = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Register Order");

        jLabel2.setText("Client:");

        jLabel5.setText("Type:");

        registerOrderMedicines.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Identifier", "Medicine", "Image", "Price", "Unities"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(registerOrderMedicines);

        jButton1.setText("Register");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("Add Medicine to Order");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5))
                        .addGap(56, 56, 56)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(registerOrderType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(registerOrderIDClient, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(108, 108, 108)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 431, Short.MAX_VALUE)
                        .addComponent(jButton4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 706, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(registerOrderIDClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton4)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(registerOrderType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2)))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public void loadMedicinesTable() throws ClassNotFoundException, IOException{
        registerOrderMedicines.getColumn("Image").setCellRenderer(new LabelRenderer()); 
        DefaultTableModel model = (DefaultTableModel) registerOrderMedicines.getModel();
        model.setRowCount(0);
        res=ConnectionSQL.createConsult("select * from medicamento;");
        try{
            while(res.next()){
                byte[] fotografiaVehiculo = res.getBytes(4);
                ByteArrayInputStream bis = new ByteArrayInputStream(fotografiaVehiculo);
                BufferedImage bImage2 = ImageIO.read(bis);
                Image foto = bImage2.getScaledInstance(210, 150, Image.SCALE_DEFAULT);
                ImageIcon fotoIcon = new ImageIcon(foto);
                JButton botonImagen = new JButton();
                botonImagen.setIcon(fotoIcon);
                Vector v = new Vector();
                v.add(res.getString(1));
                v.add(res.getString(2));
                v.add(botonImagen);
                v.add(res.getString(5));
                model.addRow(v);
                registerOrderMedicines.setModel(model);
            }
        }catch(SQLException e){
    }
    }
    public class LabelRenderer implements TableCellRenderer{
        @Override
        public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus, int row, int column){
            TableColumn tc = registerOrderMedicines.getColumn("Image");
            tc.setMinWidth(210);
            table.setRowHeight(150);
            return (Component) value;
        }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        LoginProvince datosProvincia= new LoginProvince();
        if (registerOrderIDClient.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Ingrese todos los datos correspondientes", "Información", JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            int orderClientID= Integer.parseInt(registerOrderIDClient.getText());
            int orderType= Integer.parseInt(registerOrderType.getSelectedItem().toString());
           
            
                if (logInProvince == 1){
                try {
                    AddDataProcedures.registerOrderSanJose(orderType, idEmployee , orderClientID );
                } catch (SQLException ex) {
                    Logger.getLogger(RegisterOrder.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(RegisterOrder.class.getName()).log(Level.SEVERE, null, ex);
                }
                }
                if (logInProvince == 4){
                try {
                    AddDataProcedures.registerOrderHeredia(orderType, idEmployee , orderClientID);
                } catch (SQLException ex) {
                    Logger.getLogger(RegisterOrder.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(RegisterOrder.class.getName()).log(Level.SEVERE, null, ex);
                }
                }
                else{
                try { 
                    AddDataProcedures.registerOrderCartago(orderType, idEmployee , orderClientID);
                } catch (SQLException ex) {
                    Logger.getLogger(RegisterOrder.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(RegisterOrder.class.getName()).log(Level.SEVERE, null, ex);
                }
                }
                 
                   
                JOptionPane.showMessageDialog(this, "Los datos han sido guardados correctamente");
            
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        EmployeeModule employeeModule = new EmployeeModule();
        employeeModule.setVisible(true);
        employeeModule.setLocationRelativeTo(null);
        employeeModule.setDefaultCloseOperation(EmployeeModule.HIDE_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        int row = registerOrderMedicines.getSelectedRow();
        int idMedicineOrder= Integer.parseInt(registerOrderMedicines.getValueAt(row, 0).toString());
        medicineUnities= Integer.parseInt(registerOrderMedicines.getValueAt(row, 4).toString());
        System.out.println(registerOrderMedicines.getValueAt(row, 0).toString());
        System.out.println(registerOrderMedicines.getValueAt(row, 4).toString());
        if (logInProvince == 1){
                try {
                    AddDataProcedures.registerMedicineOrderSanJose(idMedicineOrder , medicineUnities );
                } catch (SQLException ex) {
                    Logger.getLogger(RegisterOrder.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(RegisterOrder.class.getName()).log(Level.SEVERE, null, ex);
                }
                }
                if (logInProvince == 4){
                try {
                    AddDataProcedures.registerMedicineOrderHeredia(idMedicineOrder , medicineUnities );
                } catch (SQLException ex) {
                    Logger.getLogger(RegisterOrder.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(RegisterOrder.class.getName()).log(Level.SEVERE, null, ex);
                }
                }
                else{
                try { 
                    AddDataProcedures.registerMedicineOrderCartago(idMedicineOrder , medicineUnities );
                } catch (SQLException ex) {
                    Logger.getLogger(RegisterOrder.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(RegisterOrder.class.getName()).log(Level.SEVERE, null, ex);
                }
                }
                 
                   
                JOptionPane.showMessageDialog(this, "Los datos han sido guardados correctamente");
        
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField registerOrderIDClient;
    private javax.swing.JTable registerOrderMedicines;
    private javax.swing.JComboBox<String> registerOrderType;
    // End of variables declaration//GEN-END:variables
}
