/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI.Employees;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import javax.swing.JOptionPane;
import Connections.*;
import Connections.ConnectionSQL;
import java.sql.PreparedStatement;
import java.util.logging.Level;
import java.util.logging.Logger;
import static GUI.LoginProvince.idEmployee;
import static GUI.LoginProvince.logInProvince;

/**
 *
 * @author ronal
 */
public class ConsultOrder extends javax.swing.JFrame {
    static ResultSet RESULT;
    int cont;
    int orderNumber;

    /**
     * Creates new form ConsultOrder
     */
    public ConsultOrder() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        consultOrderNumber = new javax.swing.JTextField();
        consultOrderButton = new javax.swing.JButton();
        consultOrderBack = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        consultDate = new javax.swing.JLabel();
        consultStatus = new javax.swing.JLabel();
        consultName = new javax.swing.JLabel();
        consultPrice = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Consult Order");

        jLabel2.setText("Order Number:");

        consultOrderButton.setText("Consult");
        consultOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultOrderButtonActionPerformed(evt);
            }
        });

        consultOrderBack.setText("Back");
        consultOrderBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultOrderBackActionPerformed(evt);
            }
        });

        jLabel6.setText("Date:");

        jLabel8.setText("Status:");

        jLabel9.setText("Client ID:");

        jLabel12.setText("Price:");

        consultDate.setText("jLabel15");

        consultStatus.setText("jLabel17");

        consultName.setText("jLabel18");

        consultPrice.setText("jLabel21");

        jButton1.setText("Change Status");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(consultOrderNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel12))
                                .addGap(86, 86, 86)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(consultPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(consultDate, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(consultStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(consultName, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(88, 88, 88)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addComponent(consultOrderButton)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                                    .addComponent(consultOrderBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(201, 201, 201))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel8))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(consultOrderNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(consultOrderButton))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(consultName))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(consultDate, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(consultOrderBack)))
                        .addGap(25, 25, 25)
                        .addComponent(jLabel8))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(consultStatus)
                        .addComponent(jButton1)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(consultPrice)
                    .addComponent(jLabel12))
                .addContainerGap(101, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void consultOrderBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultOrderBackActionPerformed
        // TODO add your handling code here:
        EmployeeModule employeeModule = new EmployeeModule();
        employeeModule.setVisible(true);
        employeeModule.setLocationRelativeTo(null);
        employeeModule.setDefaultCloseOperation(EmployeeModule.HIDE_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_consultOrderBackActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (logInProvince ==1){
                try {

                PreparedStatement pps = ConnectionSQL.getConnectionSQL().prepareStatement("update pedidosSanJose set estadoPedido=2 where idPedido ='" + orderNumber + "'");
                pps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Los datos ha sido modificados");

            } catch (SQLException e) {
                System.out.println(e);
            } catch (ClassNotFoundException ex) {
            Logger.getLogger(ConsultOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
        }if (logInProvince ==4){
                try {

                PreparedStatement pps = ConnectionSQL.getConnectionSQL().prepareStatement("update pedidosHeredia set estadoPedido=2 where idPedido ='" + orderNumber + "'");
                pps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Los datos ha sido modificados");

            } catch (SQLException e) {
                System.out.println(e);
            } catch (ClassNotFoundException ex) {
            Logger.getLogger(ConsultOrder.class.getName()).log(Level.SEVERE, null, ex);}
        }else if(logInProvince ==3){
                try {

                PreparedStatement pps = ConnectionSQL.getConnectionSQL().prepareStatement("update pedidosHeredia set estadoPedido=2 where idPedido ='" + orderNumber + "'");
                pps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Los datos ha sido modificados");

            } catch (SQLException e) {
                System.out.println(e);
            } catch (ClassNotFoundException ex) {
            Logger.getLogger(ConsultOrder.class.getName()).log(Level.SEVERE, null, ex);       
        }}        
        EmployeeModule employeeModule = new EmployeeModule();
        employeeModule.setVisible(true);
        employeeModule.setLocationRelativeTo(null);
        employeeModule.setDefaultCloseOperation(EmployeeModule.HIDE_ON_CLOSE);
        this.dispose();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void consultOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultOrderButtonActionPerformed
        // TODO add your handling code here:
        
        if (consultOrderNumber.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese el número de orden", "Información", JOptionPane.INFORMATION_MESSAGE);
        } else {
            if (logInProvince ==1){
            try{
            orderNumber = Integer.parseInt(consultOrderNumber.getText());
            RESULT = Connections.ConnectionSQL.createConsult("Select count(idPedido) from pedidosSanJose where idPedido='" + orderNumber + "'");
           
                try {

                    while (RESULT.next()) {
                        cont = RESULT.getInt(1);

                    }

                    if (cont >= 0) {
                        RESULT = Connections.ConnectionSQL.createConsult("Select * from pedidosSanJose where idPedido='" + orderNumber + "'");
                        try {
                            while (RESULT.next()) {
                                consultName.setText((RESULT.getString(6)));
                                consultDate.setText(RESULT.getString(2));
                                consultStatus.setText(RESULT.getString(3));
                                
                            }
                        } catch (SQLException e) {
                        }
                        RESULT = Connections.ConnectionSQL.createConsult("Select precio,cantidad from medicamento,medicamentoPedidoCartago,pedidosCartago where pedidosCartago.idPedido='" 
                                + orderNumber + "' and medicamentoPedidoCartago.idPedido= pedidosCartago.idPedido and medicamento.idMedicamento = medicamentoPedidoCartago.idMedicamento");
                        try {
                            while (RESULT.next()) {
                                int precioConsulta = (Integer.parseInt(RESULT.getString(2)))*(Integer.parseInt(RESULT.getString(1)));
                                consultPrice.setText(Integer.toString(precioConsulta));
                            }
                        } catch (SQLException e) {
                        }
                    

                    }
                }catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "No existe la orden, revise el dato ingresado", "Error", JOptionPane.PLAIN_MESSAGE);
            }}catch (ClassNotFoundException ex) {
                Logger.getLogger(ConsultOrder.class.getName()).log(Level.SEVERE, null, ex);
            }}
            if (logInProvince ==4){
            try{
            orderNumber = Integer.parseInt(consultOrderNumber.getText());
            RESULT = Connections.ConnectionSQL.createConsult("Select count(idPedido) from pedidosHeredia where idPedido='" + orderNumber + "'");
           
                try {

                    while (RESULT.next()) {
                        cont = RESULT.getInt(1);

                    }

                    if (cont >= 0) {
                        RESULT = Connections.ConnectionSQL.createConsult("Select * from pedidosHeredia where idPedido='" + orderNumber + "'");
                        try {
                            while (RESULT.next()) {
                                consultName.setText((RESULT.getString(6)));
                                consultDate.setText(RESULT.getString(2));
                                consultStatus.setText(RESULT.getString(3));
                                
                            }
                        } catch (SQLException e) {
                        }
                        RESULT = Connections.ConnectionSQL.createConsult("Select precio,cantidad from medicamento,medicamentoPedidoCartago,pedidosCartago where pedidosCartago.idPedido='" 
                                + orderNumber + "' and medicamentoPedidoCartago.idPedido= pedidosCartago.idPedido and medicamento.idMedicamento = medicamentoPedidoCartago.idMedicamento");
                        try {
                            while (RESULT.next()) {
                                int precioConsulta = (Integer.parseInt(RESULT.getString(2)))*(Integer.parseInt(RESULT.getString(1)));
                                consultPrice.setText(Integer.toString(precioConsulta));
                            }
                        } catch (SQLException e) {
                        }
                    

            }
                }catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "No existe la orden, revise el dato ingresado", "Error", JOptionPane.PLAIN_MESSAGE);
            }    
            }catch (ClassNotFoundException ex) {
                Logger.getLogger(ConsultOrder.class.getName()).log(Level.SEVERE, null, ex);
            }}
            else if(logInProvince ==4){
            try{
            orderNumber = Integer.parseInt(consultOrderNumber.getText());
            RESULT = Connections.ConnectionSQL.createConsult("Select count(idPedido) from pedidosCartago where idPedido='" + orderNumber + "'");
           
                try {

                    while (RESULT.next()) {
                        cont = RESULT.getInt(1);

                    }

                    if (cont >= 0) {
                        RESULT = Connections.ConnectionSQL.createConsult("Select * from pedidosCartago where idPedido='" + orderNumber + "'");
                        try {
                            while (RESULT.next()) {
                                consultName.setText((RESULT.getString(6)));
                                consultDate.setText(RESULT.getString(2));
                                consultStatus.setText(RESULT.getString(3));
                                
                            }
                        } catch (SQLException e) {
                        }
                        RESULT = Connections.ConnectionSQL.createConsult("Select precio,cantidad from medicamento,medicamentoPedidoCartago,pedidosCartago where pedidosCartago.idPedido='" 
                                + orderNumber + "' and medicamentoPedidoCartago.idPedido= pedidosCartago.idPedido and medicamento.idMedicamento = medicamentoPedidoCartago.idMedicamento");
                        try {
                            while (RESULT.next()) {
                                int precioConsulta = (Integer.parseInt(RESULT.getString(2)))*(Integer.parseInt(RESULT.getString(1)));
                                consultPrice.setText(Integer.toString(precioConsulta));
                            }
                        } catch (SQLException e) {
                        }
                    

            }
                }catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "No existe la orden, revise el dato ingresado", "Error", JOptionPane.PLAIN_MESSAGE);
            }        
            }catch (ClassNotFoundException ex) {
                Logger.getLogger(ConsultOrder.class.getName()).log(Level.SEVERE, null, ex);
            }
               
        
        }}
                
        
            
        

           

    }//GEN-LAST:event_consultOrderButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel consultDate;
    private javax.swing.JLabel consultName;
    private javax.swing.JButton consultOrderBack;
    private javax.swing.JButton consultOrderButton;
    private javax.swing.JTextField consultOrderNumber;
    private javax.swing.JLabel consultPrice;
    private javax.swing.JLabel consultStatus;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
